apply plugin: 'com.android.application'
apply plugin: 'com.icesmith.androidtextresolver'
apply plugin: 'com.google.gms.oss.licenses.plugin'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "gradle.plugin.android-text-resolver:buildSrc:1.1.0"
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "org.mozilla"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "0.8"
        multiDexEnabled true

        def buddy_build_number = System.getenv("BUDDYBUILD_BUILD_NUMBER")
        if (buddy_build_number?.trim()) {
            versionCode buddy_build_number.toInteger()
            versionNameSuffix "." + buddy_build_number
        }
    }

    dexOptions {
        preDexLibraries true
    }

    // We have a three dimensional build configuration:
    // BUILD TYPE (debug, beta, release)

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        beta {
            initWith release

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            def userName = System.getenv("USER")
            applicationIdSuffix ".debug." + userName
            versionNameSuffix applicationIdSuffix
        }
    }

    flavorDimensions "product", "engine"

    productFlavors {
        focus {
            dimension "product"

            applicationIdSuffix ".rocket"
        }

        preview {
            dimension "product"
            applicationId "gro.allizom.zelda.beta"
            applicationIdSuffix ""
            versionNameSuffix ".nightly"
        }

        // We can build with two engines: webkit or gecko
        webkit {
            dimension "engine"
        }

    }

    variantFilter { variant ->
        def flavors = variant.flavors*.name
        // We only need a gecko debug and beta build for now.
        if (flavors.contains("preview") && variant.buildType.name != "beta") {
            setIgnore(true)
        }
    }

    sourceSets {

        focusWebkitRelease {
            java.srcDir 'src/focusRelease/java'
            manifest.srcFile 'src/focusRelease/AndroidManifest.xml'
        }

        previewWebkitBeta.res.srcDir 'src/preview/res'

    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile 'com.github.bumptech.glide:glide:4.2.0'
    compile 'com.davemorrissey.labs:subsampling-scale-image-view:3.6.0'

    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:customtabs:26.1.0'
    compile 'com.android.support:design:26.1.0'
    compile 'com.android.support:cardview-v7:26.1.0'
    compile 'com.android.support:recyclerview-v7:26.1.0'

    compile 'org.mozilla.telemetry:telemetry:1.1.1'

    compile 'com.adjust.sdk:adjust-android:4.11.4'
    compile 'com.google.android.gms:play-services-analytics:11.4.2' // Required by Adjust

    compile 'com.airbnb.android:lottie:2.2.5'
    compile 'com.android.support:support-v4:26.1.0'

    annotationProcessor 'com.github.bumptech.glide:compiler:4.2.0'
}

// -------------------------------------------------------------------------------------------------
// Generate blocklists
// -------------------------------------------------------------------------------------------------

def blockListOutputDir = 'src/webkit/res/raw'

task buildBlocklists(type:Copy) {
    from('../shavar-prod-lists') {
        include '*.json'
    }
    into blockListOutputDir

    // Android can't handle dashes in the filename, so we need to rename:
    rename 'disconnect-blacklist.json', 'blocklist.json'
    rename 'disconnect-entitylist.json', 'entitylist.json'
    // google_mapping.json already has an expected name
}

clean.doLast {
    file(blockListOutputDir).deleteDir()
}

tasks.whenTaskAdded { task ->
    def name = task.name
    if (name.contains("generate") && name.contains("Config") && name.contains("Webkit")) {
        task.dependsOn buildBlocklists
    }
}

// -------------------------------------------------------------------------------------------------
// Adjust: Read token from environment variable (Only release builds)
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def variantName = variant.getName();

    print(variantName + ": ")

    if (variantName.contains("Release") && variantName.contains("focus")) {
        def token = System.getenv("ADJUST_TOKEN_FOCUS") ?: null

        if (token != null) {
            buildConfigField 'String', 'ADJUST_TOKEN', '"' + token + '"'
            println "Added adjust token set from environment variable"
        } else {
            buildConfigField 'String', 'ADJUST_TOKEN', 'null'
            println("Not setting adjust token (environment variable not set)")
        }
    } else {
        buildConfigField 'String', 'ADJUST_TOKEN', 'null'
        println("Not setting adjust token (Not a focus release build)")
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Initialize Strings
// -------------------------------------------------------------------------------------------------

task stringsSetup(type:Exec) {
    group = 'Localization'
    description = 'Setup L10N repository for importing and exporting strings.'

    workingDir '..'

    commandLine 'git', 'clone', 'https://github.com/mozilla-l10n/zerda-android-l10n.git', 'l10n-repo'
}

// -------------------------------------------------------------------------------------------------
// L10N: Export Strings
// -------------------------------------------------------------------------------------------------

task stringsExport(type:Exec) {
    group = 'Localization'
    description = 'Export strings to L10N repository.'

    workingDir '..'

    commandLine 'python', 'tools/l10n/android2po/a2po.py', 'export'
}

// -------------------------------------------------------------------------------------------------
// L10N: Import Strings
// -------------------------------------------------------------------------------------------------

task stringsImport {
    group = 'Localization'
    description = 'Import strings from L10N repository.'

    doLast {
        exec {
            workingDir '..'
            commandLine 'python', 'tools/l10n/android2po/a2po.py', 'import'
        }
        exec {
            workingDir '../tools/l10n/'
            commandLine 'sh', 'fix_locale_folders.sh'
        }
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Create commits
// -------------------------------------------------------------------------------------------------

task stringsCommit(type:Exec) {
    group = 'Localization'
    description = 'Create commits for exported strings.'

    workingDir '../tools/l10n/'

    commandLine 'sh', 'create_commits.sh'
}

// -------------------------------------------------------------------------------------------------
// L10N: Clean and update
// -------------------------------------------------------------------------------------------------

task stringsCleanUpdate()  {
    group = 'Localization'
    description = 'Fetch L10N changes and remove all local modifications.'

    doLast {
        exec {
            workingDir '../l10n-repo/'
            commandLine 'git', 'fetch', 'origin'

        }
        exec {
            workingDir '../l10n-repo/'
            commandLine 'git', 'reset', '--hard', 'origin/master'
        }
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Generate list of locales
// Focus provides its own (Android independent) locale switcher. That switcher requires a list
// of locale codes. We generate that list here to avoid having to manually maintain a list of locales:
// -------------------------------------------------------------------------------------------------

def getEnabledLocales() {
    def resDir = file('src/main/res')

    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.startsWith("values-");
        }
    })

    def langs = potentialLanguageDirs.findAll {
        // Only select locales where strings.xml exists
        // Some locales might only contain e.g. sumo URLS in urls.xml, and should be skipped (see es vs es-ES/es-MX/etc)
        return  file(new File(it, "strings.xml")).exists()
    } .collect {
        // And reduce down to actual values-* names
        return it.name
    } .collect {
        return it.substring("values-".length())
    } .collect {
        if (it.length() > 3 && it.contains("-r")) {
            // Android resource dirs add an "r" prefix to the region - we need to strip that for java usage
            // Add 1 to have the index of the r, without the dash
            def regionPrefixPosition = it.indexOf("-r") + 1

            return it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            return it
        }
    } .collect {
        return '"' + it + '"'
    }

    // en-US is the default language (in "values") and therefore needs to be added separately
    langs << "\"en-US\""

    return langs
}

def generatedLocaleListDir = 'src/main/java/org/mozilla/focus/generated'
def generatedLocaleListFilename = 'LocaleList.java'

task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdir()
        def localeList = file(new File(dir, generatedLocaleListFilename))

        localeList.delete()
        localeList.createNewFile()
        localeList << "package org.mozilla.focus.generated;" << "\n" << "\n"
        localeList << "import java.util.Arrays;" << "\n"
        localeList << "import java.util.Collections;" << "\n"
        localeList << "import java.util.List;" << "\n"
        localeList << "\n"
        localeList << "public class LocaleList {" << "\n"
        // findbugs doesn't like "public static final String[]", see http://findbugs.sourceforge.net/bugDescriptions.html#MS_MUTABLE_ARRAY
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));" << "\n"
        localeList << "}" << "\n"
    }
}

tasks.whenTaskAdded { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

// -------------------------------------------------------------------------------------------------
// L10N: Verify locales
// -------------------------------------------------------------------------------------------------

// Fetches the available locales - this doesn't always match the actually available locales (getEnabledLocales()),
// e.g. if there were import problems:
def getTranslatedLocales() {
    def localesDir = file('../l10n-repo/locales')

    def potentialLanguageDirs = localesDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return !name.equals("templates");
        }
    })

    def langs = potentialLanguageDirs.collect {
        // Reduce from list of files to actual names
        return it.name
    } .collect {
        switch(it) {
            case "id":
                return "in"
            case "he":
                return "iw"
            default:
                return it;
        }
    } .collect {
        return '"' + it + '"'
    }

    langs << "\"en-US\""

    return langs
}

task verifyLocales << {
    group = 'Localization'
    description = 'Verify that all locales in the L10N repository were imported'

    def l10nRepo = file("../l10n-repo")
    if (!l10nRepo.isDirectory()) {
        throw new GradleException('l10n-repo does not exist, ensure you have run |gradle stringsSetup|')
    }

    def availableLocales = getTranslatedLocales()
    def successfullyImportedLocales = getEnabledLocales()

    def missingLocales = availableLocales.clone()
    missingLocales.removeAll(successfullyImportedLocales)

    if (missingLocales.size > 0) {
        throw new GradleException('The following locales were not successfully imported: ' + missingLocales.join(","))
    }

    def unexpectedLocales = successfullyImportedLocales.clone()
    unexpectedLocales.removeAll(availableLocales)

    if (unexpectedLocales.size > 0) {
        throw new GradleException('Project has additional locales: ' + unexpectedLocales.join(","))
    }
}

// Ensure we always check locale import imported all locales:
stringsImport.doLast {
    tasks.verifyLocales.execute()
}